/// <reference lib="webworker" />
/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate, NetworkFirst } from 'workbox-strategies';

declare const self: ServiceWorkerGlobalScope;
const CACHE_VERSION = 'v0.1.14'; // Change this to a new version (e.g., 'v3')

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }: { request: Request; url: URL }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    }

    // If this is a URL that starts with /_, skip.
    if (url.pathname.startsWith('/_')) {
      return false;
    }

    // If this looks like a URL for a resource, because it contains
    // a file extension, skip.
    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    }

    // Return true to signal that we want to use the handler.
    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) =>
    url.origin === self.location.origin && url.pathname.endsWith('.png'),
  // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);

const networkFirstHandler = new NetworkFirst({
  cacheName: CACHE_VERSION,
  plugins: [new ExpirationPlugin({ maxEntries: 50 })],
});

async function fetchAndCache(url: string) {
  const response = await fetch(url);
  if (!response.ok) {
    throw new Error(`Request failed with status ${response.status}`);
  }

  const cache = await caches.open(CACHE_VERSION);
  cache.put(url, response.clone());
  return response;
}

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

// 'install' event listener to cache necessary assets and directories
self.addEventListener('install', (event: ExtendableEvent) => {
  // Function to fetch and cache content of multiple directories
  const fetchDirectories = async (directories: string[]) => {
    // Function to fetch and cache content of a single directory
    const fetchDirectoryContents = async (dirUrl: string) => {
      const response = await fetch(dirUrl);
      const content = await response.text();
      const urls = content.match(/href="(.*?)"/g);
      if (urls !== null) {
        await Promise.all(
          urls.map((url: string) => fetchAndCache(url.slice(6, -1)))
        );
      }
    };

    await Promise.all(
      directories.map((dirUrl: string) => fetchDirectoryContents(dirUrl))
    );
  };

  // Cache necessary assets and then fetch directories
  event.waitUntil(
    caches
      .open(CACHE_VERSION)
      .then((cache: Cache) => {
        return cache.addAll([
          '/',
          '/index.html',
          '/css/styles.css',
          '/js/app.js',
          // Add or update assets here
        ]);
      })
      .then(() => fetchDirectories(['/Pages/', '/Components/', '/Store/']))
  );
});

// 'activate' event listener to delete old caches
self.addEventListener('activate', (event: ExtendableEvent) => {
  event.waitUntil(
    caches
      .keys()
      .then((cacheNames: string[]) => {
        return Promise.all(
          cacheNames.map((cacheName: string) => {
            // Delete cache if the cache name is not equal to the current CACHE_VERSION
            if (cacheName !== CACHE_VERSION) {
              return caches.delete(cacheName);
            }
          })
        );
      })
      .then(() => self.clients.claim()) // Force the new service worker to take control immediately
  );
});

self.addEventListener('fetch', (event) => {
  event.respondWith(
    (async () => {
      const response = await networkFirstHandler.handle(event);
      if (!response) {
        return caches.match(event.request).then((cachedResponse) => {
          return (
            cachedResponse ||
            new Response('Fallback content', { status: 200, statusText: 'OK' })
          );
        });
      }
      return response;
    })()
  );
});

self.addEventListener('push', function (e: any) {
  const options = {
    body: 'This is your message',
    icon: 'images/icon.png',
    vibrate: [100, 50, 100],
    data: {
      dateOfArrival: Date.now(),
      primaryKey: '2',
    },
    actions: [
      {
        action: 'explore',
        title: 'Explore this new world',
        icon: 'images/checkmark.png',
      },
      { action: 'close', title: 'Close', icon: 'images/xmark.png' },
    ],
  };

  e.waitUntil(self.registration.showNotification('Hello world!', options));
});

// Any other custom service worker logic can go here.
